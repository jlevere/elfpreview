package elfpreview:parser;

interface types {
  record sectioninfo {
    name: string,
    size: u64,
    address: u64,
    typename: string,
  }

  record programinfo {
    typename: string,
    flagstring: string,
    vaddr: u64,
    paddr: u64,
    filesz: u64,
    memsz: u64,
  }

  record symbolinfo {
    name: string,
    typestr: string,
    bind: string,
    vis: string,
    value: u64,
    size: u64,
  }

  record fileinfo {
    machine: string,
    entrypoint: u64,
    class: string,
    endianness: string,
    osabi: string,
    filetype: string,
    version: u32,
    stripped: bool,
  }

  record dynlinkinfo {
    is-dynamic: bool,
    interpreter: option<string>,
    needed-libs: list<string>,
    soname: option<string>,
    rpath: option<list<string>>,
    runpath: option<list<string>>,
  }

  record elfinfo {
    info: fileinfo,
    sectionheaders: list<sectioninfo>,
    programheaders: list<programinfo>,
    symbols: list<symbolinfo>,
    dynlink: dynlinkinfo,
  }
}

interface elfparser {
  use types.{elfinfo, fileinfo};
 
  // Parse an ELF binary file
  parseelf: func(data: list<u8>) -> result<elfinfo, string>;
  
  // Check if file is valid ELF
  validateelf: func(data: list<u8>) -> result<bool, string>;

  // Parse just the header
  quickparseelf: func(data: list<u8>) -> result<fileinfo, string>;
}

world elfpreview {
  export elfparser;
}
