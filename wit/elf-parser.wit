package elfpreview:parser;

interface types {
  record sectioninfo {
    name: string,
    size: u64,
    address: u64,
    typename: string,
  }

  record programinfo {
    typename: string,
    flagstring: string,
    vaddr: u64,
    paddr: u64,
    filesz: u64,
    memsz: u64,
  }

  record symbolinfo {
    name: string,
    value: u64,
    size: u64,
    isfunction: bool,
  }

  record elfinfo {
    machine: string,
    entrypoint: u64,
    sectionheaders: list<sectioninfo>,
    programheaders: list<programinfo>,
    symbols: list<symbolinfo>,
  }

  record headerinfo {
    isvalid: bool,
    class: string,
    endianness: string,
    osabi: string,
    filetype: string,
    machine: string,
    version: u32,
    headerssize: u64,
  }
}

interface elfparser {
  use types.{elfinfo, headerinfo};
 
  // Parse an ELF binary file
  parseelf: func(data: list<u8>) -> result<elfinfo, string>;
  
  // Check if file is valid ELF and return basic header info
  validateelf: func(data: list<u8>) -> result<headerinfo, string>;
}

world elfpreview {
  export elfparser;
}
