package bininspect:api;

interface types {
  // ------------------------------------------------------------------------
  // Basic identification enums
  // ------------------------------------------------------------------------

  /// Supported binary container formats.
  enum format {
    elf,
    pe,
    mach,
    unknown,
  }

  /// CPU bit-width of the binary.
  enum bitness {
    bits32,
    bits64,
  }

  /// Endianness of encoded integers.
  enum endianness {
    little,
    big,
  }

  variant file-kind {
    known(format),
    other(string),
    unknown,
  }

  // ------------------------------------------------------------------------
  // ELF-specific structures
  // ------------------------------------------------------------------------
  record elf-section-info {
    name: string,
    size: u64,
    address: u64,
    kind: string,
  }

  record elf-program-header {
    kind: string,
    flag-string: string,
    vaddr: u64,
    paddr: u64,
    file-size: u64,
    mem-size: u64,
  }

  record elf-symbol-info {
    name: string,
    kind: string,
    bind: string,
    vis: string,
    value: u64,
    size: u64,
  }

  record elf-dynlink-info {
    is-dynamic: bool,
    interpreter: option<string>,
    needed-libs: list<string>,
    soname: option<string>,
    rpath: option<list<string>>,  // DT_RPATH
    runpath: option<list<string>>, // DT_RUNPATH
  }

  record elf-details {
    sections: list<elf-section-info>,
    program-headers: list<elf-program-header>,
    symbols: list<elf-symbol-info>,
    dynlink: elf-dynlink-info,
  }

  // ------------------------------------------------------------------------
  // PE-specific structures
  // ------------------------------------------------------------------------
  record pe-section-info {
    name: string,
    virtual-size: u32,
    virtual-address: u32,
    size-of-raw-data: u32,
    pointer-to-raw-data: u32,
    characteristics: string,
  }

  record pe-import-info {
    dll-name: string,
    functions: list<string>,
  }

  record pe-export-info {
    name: string,
    ordinal: u16,
    rva: u32,
  }

  record pe-details {
    sections: list<pe-section-info>,
    imports: list<pe-import-info>,
    exports: list<pe-export-info>,
    subsystem: string,
    dll-characteristics: string,
    image-base: u64,
  }

  // ------------------------------------------------------------------------
  // Mach-O specific structures
  // ------------------------------------------------------------------------
  record mach-segment-info {
    name: string,
    vmaddr: u64,
    vmsize: u64,
    fileoff: u64,
    filesize: u64,
    prot: string,
  }

  record mach-dylib-info {
    name: string,
    current-version: string,
  }

  record mach-details {
    segments: list<mach-segment-info>,
    dylibs: list<mach-dylib-info>,
  }

  // ------------------------------------------------------------------------
  // Aggregate parse result â€“ easy to extend in the future
  // ------------------------------------------------------------------------
  variant details {
    elf(elf-details),
    pe(pe-details),
    mach(mach-details),
    unsupported,
  }
}

// --------------------------------------------------------------------------
// Public inspector interface
// --------------------------------------------------------------------------
interface inspector {
  use types.{file-kind, details};

  /// Fast identification based only on the container header (akin to the `file` utility).
  identify: func(data: list<u8>) -> result<file-kind, string>;

  /// Full parse of the binary, returning format-specific information.
  /// The caller should typically invoke `identify` first and only call this
  /// when the reported format is something they want to inspect deeply.
  parse: func(data: list<u8>) -> result<details, string>;
}

// --------------------------------------------------------------------------
// Component world description
// --------------------------------------------------------------------------
world bininspect {
  export inspector;
}
